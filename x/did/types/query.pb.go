// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: did/query.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Request/response types from old x/did/client/cli/query.go and
// x/did/client/rest/query.go
type QueryDidDocRequest struct {
	// did defines the DID for the requested DidDoc
	Did string `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty" json:"did" yaml:"did"`
}

func (m *QueryDidDocRequest) Reset()         { *m = QueryDidDocRequest{} }
func (m *QueryDidDocRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDidDocRequest) ProtoMessage()    {}
func (*QueryDidDocRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31228b4ee4821623, []int{0}
}
func (m *QueryDidDocRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDidDocRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDidDocRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDidDocRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDidDocRequest.Merge(m, src)
}
func (m *QueryDidDocRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDidDocRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDidDocRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDidDocRequest proto.InternalMessageInfo

func (m *QueryDidDocRequest) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

type QueryDidDocResponse struct {
	// diddoc returns the requested DidDoc
	Diddoc *types.Any `protobuf:"bytes,1,opt,name=diddoc,proto3" json:"diddoc,omitempty" json:"did_doc" yaml:"did_doc"`
}

func (m *QueryDidDocResponse) Reset()         { *m = QueryDidDocResponse{} }
func (m *QueryDidDocResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDidDocResponse) ProtoMessage()    {}
func (*QueryDidDocResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31228b4ee4821623, []int{1}
}
func (m *QueryDidDocResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDidDocResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDidDocResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDidDocResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDidDocResponse.Merge(m, src)
}
func (m *QueryDidDocResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDidDocResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDidDocResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDidDocResponse proto.InternalMessageInfo

func (m *QueryDidDocResponse) GetDiddoc() *types.Any {
	if m != nil {
		return m.Diddoc
	}
	return nil
}

type QueryAllDidsRequest struct {
}

func (m *QueryAllDidsRequest) Reset()         { *m = QueryAllDidsRequest{} }
func (m *QueryAllDidsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllDidsRequest) ProtoMessage()    {}
func (*QueryAllDidsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31228b4ee4821623, []int{2}
}
func (m *QueryAllDidsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDidsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDidsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDidsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDidsRequest.Merge(m, src)
}
func (m *QueryAllDidsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDidsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDidsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDidsRequest proto.InternalMessageInfo

type QueryAllDidsResponse struct {
	// dids returns a list of all DIDs
	Dids []string `protobuf:"bytes,1,rep,name=dids,proto3" json:"dids,omitempty" json:"dids" yaml:"dids"`
}

func (m *QueryAllDidsResponse) Reset()         { *m = QueryAllDidsResponse{} }
func (m *QueryAllDidsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllDidsResponse) ProtoMessage()    {}
func (*QueryAllDidsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31228b4ee4821623, []int{3}
}
func (m *QueryAllDidsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDidsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDidsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDidsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDidsResponse.Merge(m, src)
}
func (m *QueryAllDidsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDidsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDidsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDidsResponse proto.InternalMessageInfo

func (m *QueryAllDidsResponse) GetDids() []string {
	if m != nil {
		return m.Dids
	}
	return nil
}

type QueryAllDidDocsRequest struct {
}

func (m *QueryAllDidDocsRequest) Reset()         { *m = QueryAllDidDocsRequest{} }
func (m *QueryAllDidDocsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllDidDocsRequest) ProtoMessage()    {}
func (*QueryAllDidDocsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31228b4ee4821623, []int{4}
}
func (m *QueryAllDidDocsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDidDocsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDidDocsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDidDocsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDidDocsRequest.Merge(m, src)
}
func (m *QueryAllDidDocsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDidDocsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDidDocsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDidDocsRequest proto.InternalMessageInfo

type QueryAllDidDocsResponse struct {
	// diddocs returns a list of all DidDocs
	Diddocs []*types.Any `protobuf:"bytes,1,rep,name=diddocs,proto3" json:"diddocs,omitempty" json:"did_docs" yaml:"did_docs"`
}

func (m *QueryAllDidDocsResponse) Reset()         { *m = QueryAllDidDocsResponse{} }
func (m *QueryAllDidDocsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllDidDocsResponse) ProtoMessage()    {}
func (*QueryAllDidDocsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31228b4ee4821623, []int{5}
}
func (m *QueryAllDidDocsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDidDocsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDidDocsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDidDocsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDidDocsResponse.Merge(m, src)
}
func (m *QueryAllDidDocsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDidDocsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDidDocsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDidDocsResponse proto.InternalMessageInfo

func (m *QueryAllDidDocsResponse) GetDiddocs() []*types.Any {
	if m != nil {
		return m.Diddocs
	}
	return nil
}

type QueryAddressFromDidRequest struct {
	// did defines the DID for the requested address
	Did string `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty" json:"did" yaml:"did"`
}

func (m *QueryAddressFromDidRequest) Reset()         { *m = QueryAddressFromDidRequest{} }
func (m *QueryAddressFromDidRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAddressFromDidRequest) ProtoMessage()    {}
func (*QueryAddressFromDidRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31228b4ee4821623, []int{6}
}
func (m *QueryAddressFromDidRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAddressFromDidRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAddressFromDidRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAddressFromDidRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAddressFromDidRequest.Merge(m, src)
}
func (m *QueryAddressFromDidRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAddressFromDidRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAddressFromDidRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAddressFromDidRequest proto.InternalMessageInfo

func (m *QueryAddressFromDidRequest) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

type QueryAddressFromDidResponse struct {
	// address returns the address for a given DID
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" json:"address" yaml:"address"`
}

func (m *QueryAddressFromDidResponse) Reset()         { *m = QueryAddressFromDidResponse{} }
func (m *QueryAddressFromDidResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAddressFromDidResponse) ProtoMessage()    {}
func (*QueryAddressFromDidResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31228b4ee4821623, []int{7}
}
func (m *QueryAddressFromDidResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAddressFromDidResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAddressFromDidResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAddressFromDidResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAddressFromDidResponse.Merge(m, src)
}
func (m *QueryAddressFromDidResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAddressFromDidResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAddressFromDidResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAddressFromDidResponse proto.InternalMessageInfo

func (m *QueryAddressFromDidResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryAddressFromBase58EncodedPubkeyRequest struct {
	// pubKey defines the PubKey for the requested address
	PubKey string `protobuf:"bytes,1,opt,name=pubKey,proto3" json:"pubKey,omitempty" json:"pubKey" yaml:"pubKey"`
}

func (m *QueryAddressFromBase58EncodedPubkeyRequest) Reset() {
	*m = QueryAddressFromBase58EncodedPubkeyRequest{}
}
func (m *QueryAddressFromBase58EncodedPubkeyRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAddressFromBase58EncodedPubkeyRequest) ProtoMessage() {}
func (*QueryAddressFromBase58EncodedPubkeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31228b4ee4821623, []int{8}
}
func (m *QueryAddressFromBase58EncodedPubkeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAddressFromBase58EncodedPubkeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAddressFromBase58EncodedPubkeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAddressFromBase58EncodedPubkeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAddressFromBase58EncodedPubkeyRequest.Merge(m, src)
}
func (m *QueryAddressFromBase58EncodedPubkeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAddressFromBase58EncodedPubkeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAddressFromBase58EncodedPubkeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAddressFromBase58EncodedPubkeyRequest proto.InternalMessageInfo

func (m *QueryAddressFromBase58EncodedPubkeyRequest) GetPubKey() string {
	if m != nil {
		return m.PubKey
	}
	return ""
}

type QueryAddressFromBase58EncodedPubkeyResponse struct {
	// address returns the address for a given PubKey
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" json:"address" yaml:"address"`
}

func (m *QueryAddressFromBase58EncodedPubkeyResponse) Reset() {
	*m = QueryAddressFromBase58EncodedPubkeyResponse{}
}
func (m *QueryAddressFromBase58EncodedPubkeyResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAddressFromBase58EncodedPubkeyResponse) ProtoMessage() {}
func (*QueryAddressFromBase58EncodedPubkeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31228b4ee4821623, []int{9}
}
func (m *QueryAddressFromBase58EncodedPubkeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAddressFromBase58EncodedPubkeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAddressFromBase58EncodedPubkeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAddressFromBase58EncodedPubkeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAddressFromBase58EncodedPubkeyResponse.Merge(m, src)
}
func (m *QueryAddressFromBase58EncodedPubkeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAddressFromBase58EncodedPubkeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAddressFromBase58EncodedPubkeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAddressFromBase58EncodedPubkeyResponse proto.InternalMessageInfo

func (m *QueryAddressFromBase58EncodedPubkeyResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryDidDocRequest)(nil), "did.QueryDidDocRequest")
	proto.RegisterType((*QueryDidDocResponse)(nil), "did.QueryDidDocResponse")
	proto.RegisterType((*QueryAllDidsRequest)(nil), "did.QueryAllDidsRequest")
	proto.RegisterType((*QueryAllDidsResponse)(nil), "did.QueryAllDidsResponse")
	proto.RegisterType((*QueryAllDidDocsRequest)(nil), "did.QueryAllDidDocsRequest")
	proto.RegisterType((*QueryAllDidDocsResponse)(nil), "did.QueryAllDidDocsResponse")
	proto.RegisterType((*QueryAddressFromDidRequest)(nil), "did.QueryAddressFromDidRequest")
	proto.RegisterType((*QueryAddressFromDidResponse)(nil), "did.QueryAddressFromDidResponse")
	proto.RegisterType((*QueryAddressFromBase58EncodedPubkeyRequest)(nil), "did.QueryAddressFromBase58EncodedPubkeyRequest")
	proto.RegisterType((*QueryAddressFromBase58EncodedPubkeyResponse)(nil), "did.QueryAddressFromBase58EncodedPubkeyResponse")
}

func init() { proto.RegisterFile("did/query.proto", fileDescriptor_31228b4ee4821623) }

var fileDescriptor_31228b4ee4821623 = []byte{
	// 647 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x4f, 0x4f, 0x13, 0x41,
	0x18, 0xc6, 0x59, 0xc1, 0x12, 0x06, 0xd0, 0x64, 0xf8, 0x57, 0xb6, 0xb8, 0x5b, 0xc7, 0x0b, 0x81,
	0xd8, 0x31, 0x10, 0xa3, 0xd1, 0x78, 0xa0, 0xa9, 0x1a, 0xa3, 0x46, 0x5d, 0x3d, 0x11, 0x13, 0xb3,
	0xdd, 0x77, 0x28, 0x03, 0x65, 0xa7, 0x74, 0xba, 0x09, 0x1b, 0xc3, 0xc5, 0x4f, 0x60, 0xe2, 0xd5,
	0x9b, 0x5f, 0xc6, 0x23, 0x89, 0x17, 0x4f, 0x8d, 0x01, 0x3f, 0x41, 0x3f, 0x81, 0x99, 0x3f, 0x0b,
	0x5b, 0x68, 0x0d, 0x31, 0xde, 0xf6, 0xdd, 0x77, 0xe6, 0xf9, 0x3d, 0xef, 0xce, 0x33, 0x8b, 0xae,
	0x03, 0x07, 0xba, 0x9f, 0xb0, 0x76, 0x5a, 0x69, 0xb5, 0x45, 0x47, 0xe0, 0x51, 0xe0, 0xe0, 0xce,
	0x36, 0x44, 0x43, 0xe8, 0x9a, 0xaa, 0x27, 0xd3, 0x72, 0x97, 0x1a, 0x42, 0x34, 0x9a, 0x8c, 0x86,
	0x2d, 0x4e, 0xc3, 0x38, 0x16, 0x9d, 0xb0, 0xc3, 0x45, 0x2c, 0x6d, 0x77, 0xd1, 0x76, 0x75, 0x55,
	0x4f, 0xb6, 0x68, 0x18, 0x5b, 0x4d, 0x77, 0x5a, 0x41, 0x80, 0x83, 0x29, 0xc9, 0x06, 0xc2, 0x6f,
	0x14, 0xb1, 0xc6, 0xa1, 0x26, 0xa2, 0x80, 0xed, 0x27, 0x4c, 0x76, 0xf0, 0x2a, 0x52, 0xe8, 0xa2,
	0x53, 0x76, 0x96, 0x27, 0xaa, 0x8b, 0xbd, 0xae, 0x3f, 0xb7, 0x23, 0x45, 0xfc, 0x80, 0x00, 0x07,
	0x52, 0x4e, 0xc3, 0xbd, 0xa6, 0x79, 0x0c, 0xd4, 0x2a, 0xb2, 0x85, 0x66, 0xfa, 0x24, 0x64, 0x4b,
	0xc4, 0x92, 0xe1, 0x57, 0xa8, 0x00, 0x1c, 0x40, 0x44, 0x5a, 0x66, 0x72, 0x6d, 0xb6, 0x62, 0x4c,
	0x55, 0x32, 0x53, 0x95, 0x8d, 0x38, 0xad, 0xde, 0xec, 0x75, 0xfd, 0x1b, 0xa7, 0xe2, 0x1f, 0x40,
	0x44, 0x39, 0x80, 0x2e, 0x03, 0x2b, 0x43, 0xe6, 0x2c, 0x67, 0xa3, 0xd9, 0xac, 0x71, 0x90, 0xd6,
	0x2b, 0x79, 0x8a, 0x66, 0xfb, 0x5f, 0x5b, 0x3e, 0x45, 0x63, 0xc0, 0x41, 0x16, 0x9d, 0xf2, 0xe8,
	0xf2, 0x44, 0xb5, 0xd4, 0xeb, 0xfa, 0x0b, 0xa7, 0x1c, 0x99, 0x83, 0x48, 0x12, 0xe8, 0x85, 0xa4,
	0x88, 0xe6, 0x73, 0x42, 0x35, 0x11, 0x9d, 0x22, 0x62, 0xb4, 0x70, 0xa1, 0x63, 0x29, 0x6f, 0xd1,
	0xb8, 0xb1, 0x67, 0x40, 0xc3, 0xc6, 0xbc, 0xd5, 0xeb, 0xfa, 0x7e, 0xdf, 0x98, 0xf2, 0xdc, 0x9c,
	0x92, 0x04, 0x99, 0x12, 0x79, 0x86, 0x5c, 0xc3, 0x03, 0x68, 0x33, 0x29, 0x9f, 0xb4, 0xc5, 0x5e,
	0x8d, 0xc3, 0x3f, 0x1d, 0xce, 0x26, 0x2a, 0x0d, 0x94, 0xb2, 0xf6, 0x1f, 0xa2, 0xf1, 0xd0, 0x74,
	0xac, 0x5e, 0xee, 0x3c, 0x6c, 0x23, 0xd3, 0xcc, 0xca, 0x20, 0xdb, 0x41, 0x18, 0x5a, 0x39, 0xaf,
	0x5d, 0x0d, 0x25, 0xbb, 0x7b, 0xff, 0x71, 0x1c, 0x09, 0x60, 0xf0, 0x3a, 0xa9, 0xef, 0xb2, 0x34,
	0xb3, 0x7d, 0x0f, 0x15, 0x5a, 0x49, 0xfd, 0x39, 0x4b, 0x2d, 0xc9, 0xef, 0x75, 0xfd, 0x92, 0x21,
	0x99, 0xf7, 0x19, 0xc8, 0x56, 0x81, 0x5d, 0x4e, 0x76, 0xd0, 0xea, 0xa5, 0x30, 0xff, 0x61, 0xa4,
	0xb5, 0xaf, 0x63, 0xe8, 0xaa, 0x86, 0xa9, 0xf8, 0x9a, 0xb3, 0xc6, 0x0b, 0x15, 0x75, 0x5d, 0x2e,
	0xde, 0x12, 0xb7, 0x78, 0xb1, 0x61, 0x3c, 0x10, 0xfc, 0xe9, 0xc7, 0xef, 0x2f, 0x57, 0xa6, 0x30,
	0x52, 0x37, 0x8d, 0x7e, 0x04, 0x0e, 0x87, 0xf8, 0x05, 0x1a, 0xb7, 0x11, 0xc5, 0xb9, 0x8d, 0xfd,
	0x61, 0x76, 0x17, 0x07, 0x74, 0xac, 0xe6, 0x94, 0xd6, 0x2c, 0xe0, 0x31, 0xa5, 0x89, 0xdf, 0x23,
	0x74, 0x96, 0x46, 0x5c, 0x3a, 0xbf, 0x2d, 0x97, 0x5e, 0x77, 0x69, 0x70, 0xd3, 0xca, 0xce, 0x68,
	0xd9, 0x69, 0x3c, 0x49, 0xc3, 0x33, 0xbd, 0x16, 0xba, 0xd6, 0x1f, 0x18, 0xec, 0xe7, 0x44, 0x06,
	0xa5, 0xd2, 0x2d, 0x0f, 0x5f, 0x60, 0x49, 0x25, 0x4d, 0x9a, 0xc3, 0x33, 0x6a, 0x80, 0x77, 0x42,
	0xad, 0xd2, 0x9f, 0xe6, 0xd1, 0xca, 0xca, 0x21, 0xfe, 0xe6, 0x20, 0xef, 0xef, 0x07, 0x8c, 0xe9,
	0x40, 0xc2, 0xf0, 0xc4, 0xb9, 0x77, 0x2e, 0xbf, 0xc1, 0x5a, 0xf4, 0xb4, 0xc5, 0x22, 0x9e, 0xa7,
	0x26, 0x7b, 0x99, 0x4b, 0x53, 0x1d, 0x56, 0x5f, 0x7e, 0x3f, 0xf6, 0x9c, 0xa3, 0x63, 0xcf, 0xf9,
	0x75, 0xec, 0x39, 0x9f, 0x4f, 0xbc, 0x91, 0xa3, 0x13, 0x6f, 0xe4, 0xe7, 0x89, 0x37, 0xb2, 0xb9,
	0xde, 0xe0, 0x9d, 0xed, 0xa4, 0x5e, 0x89, 0xc4, 0x1e, 0xe5, 0x07, 0x62, 0x4b, 0x24, 0x31, 0xe8,
	0x5f, 0xb2, 0xaa, 0x6e, 0xd7, 0x9b, 0x22, 0xda, 0x8d, 0xb6, 0x43, 0x1e, 0xd3, 0x03, 0x1d, 0x89,
	0x4e, 0xda, 0x62, 0xb2, 0x5e, 0xd0, 0xff, 0x88, 0xf5, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x9e,
	0x1b, 0xdc, 0x19, 0xf9, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	DidDoc(ctx context.Context, in *QueryDidDocRequest, opts ...grpc.CallOption) (*QueryDidDocResponse, error)
	AllDids(ctx context.Context, in *QueryAllDidsRequest, opts ...grpc.CallOption) (*QueryAllDidsResponse, error)
	AllDidDocs(ctx context.Context, in *QueryAllDidDocsRequest, opts ...grpc.CallOption) (*QueryAllDidDocsResponse, error)
	AddressFromDid(ctx context.Context, in *QueryAddressFromDidRequest, opts ...grpc.CallOption) (*QueryAddressFromDidResponse, error)
	AddressFromBase58EncodedPubkey(ctx context.Context, in *QueryAddressFromBase58EncodedPubkeyRequest, opts ...grpc.CallOption) (*QueryAddressFromBase58EncodedPubkeyResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) DidDoc(ctx context.Context, in *QueryDidDocRequest, opts ...grpc.CallOption) (*QueryDidDocResponse, error) {
	out := new(QueryDidDocResponse)
	err := c.cc.Invoke(ctx, "/did.Query/DidDoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllDids(ctx context.Context, in *QueryAllDidsRequest, opts ...grpc.CallOption) (*QueryAllDidsResponse, error) {
	out := new(QueryAllDidsResponse)
	err := c.cc.Invoke(ctx, "/did.Query/AllDids", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllDidDocs(ctx context.Context, in *QueryAllDidDocsRequest, opts ...grpc.CallOption) (*QueryAllDidDocsResponse, error) {
	out := new(QueryAllDidDocsResponse)
	err := c.cc.Invoke(ctx, "/did.Query/AllDidDocs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AddressFromDid(ctx context.Context, in *QueryAddressFromDidRequest, opts ...grpc.CallOption) (*QueryAddressFromDidResponse, error) {
	out := new(QueryAddressFromDidResponse)
	err := c.cc.Invoke(ctx, "/did.Query/AddressFromDid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AddressFromBase58EncodedPubkey(ctx context.Context, in *QueryAddressFromBase58EncodedPubkeyRequest, opts ...grpc.CallOption) (*QueryAddressFromBase58EncodedPubkeyResponse, error) {
	out := new(QueryAddressFromBase58EncodedPubkeyResponse)
	err := c.cc.Invoke(ctx, "/did.Query/AddressFromBase58EncodedPubkey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	DidDoc(context.Context, *QueryDidDocRequest) (*QueryDidDocResponse, error)
	AllDids(context.Context, *QueryAllDidsRequest) (*QueryAllDidsResponse, error)
	AllDidDocs(context.Context, *QueryAllDidDocsRequest) (*QueryAllDidDocsResponse, error)
	AddressFromDid(context.Context, *QueryAddressFromDidRequest) (*QueryAddressFromDidResponse, error)
	AddressFromBase58EncodedPubkey(context.Context, *QueryAddressFromBase58EncodedPubkeyRequest) (*QueryAddressFromBase58EncodedPubkeyResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) DidDoc(ctx context.Context, req *QueryDidDocRequest) (*QueryDidDocResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DidDoc not implemented")
}
func (*UnimplementedQueryServer) AllDids(ctx context.Context, req *QueryAllDidsRequest) (*QueryAllDidsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllDids not implemented")
}
func (*UnimplementedQueryServer) AllDidDocs(ctx context.Context, req *QueryAllDidDocsRequest) (*QueryAllDidDocsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllDidDocs not implemented")
}
func (*UnimplementedQueryServer) AddressFromDid(ctx context.Context, req *QueryAddressFromDidRequest) (*QueryAddressFromDidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressFromDid not implemented")
}
func (*UnimplementedQueryServer) AddressFromBase58EncodedPubkey(ctx context.Context, req *QueryAddressFromBase58EncodedPubkeyRequest) (*QueryAddressFromBase58EncodedPubkeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressFromBase58EncodedPubkey not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_DidDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDidDocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DidDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/did.Query/DidDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DidDoc(ctx, req.(*QueryDidDocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllDids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllDidsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllDids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/did.Query/AllDids",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllDids(ctx, req.(*QueryAllDidsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllDidDocs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllDidDocsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllDidDocs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/did.Query/AllDidDocs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllDidDocs(ctx, req.(*QueryAllDidDocsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AddressFromDid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAddressFromDidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AddressFromDid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/did.Query/AddressFromDid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AddressFromDid(ctx, req.(*QueryAddressFromDidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AddressFromBase58EncodedPubkey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAddressFromBase58EncodedPubkeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AddressFromBase58EncodedPubkey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/did.Query/AddressFromBase58EncodedPubkey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AddressFromBase58EncodedPubkey(ctx, req.(*QueryAddressFromBase58EncodedPubkeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "did.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DidDoc",
			Handler:    _Query_DidDoc_Handler,
		},
		{
			MethodName: "AllDids",
			Handler:    _Query_AllDids_Handler,
		},
		{
			MethodName: "AllDidDocs",
			Handler:    _Query_AllDidDocs_Handler,
		},
		{
			MethodName: "AddressFromDid",
			Handler:    _Query_AddressFromDid_Handler,
		},
		{
			MethodName: "AddressFromBase58EncodedPubkey",
			Handler:    _Query_AddressFromBase58EncodedPubkey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "did/query.proto",
}

func (m *QueryDidDocRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDidDocRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDidDocRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDidDocResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDidDocResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDidDocResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Diddoc != nil {
		{
			size, err := m.Diddoc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllDidsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDidsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDidsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllDidsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDidsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDidsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Dids) > 0 {
		for iNdEx := len(m.Dids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Dids[iNdEx])
			copy(dAtA[i:], m.Dids[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Dids[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllDidDocsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDidDocsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDidDocsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllDidDocsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDidDocsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDidDocsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Diddocs) > 0 {
		for iNdEx := len(m.Diddocs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Diddocs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAddressFromDidRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAddressFromDidRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAddressFromDidRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAddressFromDidResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAddressFromDidResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAddressFromDidResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAddressFromBase58EncodedPubkeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAddressFromBase58EncodedPubkeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAddressFromBase58EncodedPubkeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAddressFromBase58EncodedPubkeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAddressFromBase58EncodedPubkeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAddressFromBase58EncodedPubkeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryDidDocRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDidDocResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Diddoc != nil {
		l = m.Diddoc.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllDidsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllDidsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Dids) > 0 {
		for _, s := range m.Dids {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAllDidDocsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllDidDocsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Diddocs) > 0 {
		for _, e := range m.Diddocs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAddressFromDidRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAddressFromDidResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAddressFromBase58EncodedPubkeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAddressFromBase58EncodedPubkeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryDidDocRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDidDocRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDidDocRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDidDocResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDidDocResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDidDocResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diddoc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Diddoc == nil {
				m.Diddoc = &types.Any{}
			}
			if err := m.Diddoc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDidsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDidsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDidsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDidsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDidsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDidsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dids = append(m.Dids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDidDocsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDidDocsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDidDocsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDidDocsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDidDocsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDidDocsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diddocs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Diddocs = append(m.Diddocs, &types.Any{})
			if err := m.Diddocs[len(m.Diddocs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAddressFromDidRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAddressFromDidRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAddressFromDidRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAddressFromDidResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAddressFromDidResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAddressFromDidResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAddressFromBase58EncodedPubkeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAddressFromBase58EncodedPubkeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAddressFromBase58EncodedPubkeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAddressFromBase58EncodedPubkeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAddressFromBase58EncodedPubkeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAddressFromBase58EncodedPubkeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
